// lib/main.dart

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:firebase_core/firebase_core.dart'; // ‚¨ÖÔ∏è –í–ö–õ–Æ–ß–ê–ï–ú –ò–ú–ü–û–†–¢

import 'screens/auth_screen.dart';
import 'screens/map_screen.dart'; // –î–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
import 'screens/worker_home_screen.dart'; // –î–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
import 'services/db_service.dart';
import 'services/location_exchange_service.dart'; // —Å–µ—Ä–≤–∏—Å –≤ lib/services/

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
  await DBService.init();

  // ‚úÖ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE (–¢–ï–ü–ï–†–¨ –î–û–õ–ñ–ù–ê –†–ê–ë–û–¢–ê–¢–¨ –° GOOGLESERVICE-INFO.PLIST)
  try {
    await Firebase.initializeApp();
    debugPrint("‚úÖ Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  } catch (e) {
    // –í —Å–ª—É—á–∞–µ —Å–±–æ—è, –ø–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ, –∑–∞–ª–æ–≥–∏—Ä—É–µ–º –µ–≥–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º
    debugPrint("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: $e");
  }
  

  // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
  final prefs = await SharedPreferences.getInstance();
  final String? userRole = prefs.getString('user_role');

  runApp(MyApp(initialRole: userRole));
}

class MyApp extends StatelessWidget {
  final String? initialRole;
  const MyApp({super.key, this.initialRole});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AI –ü–æ–º–æ—â–Ω–∏–∫: SOS',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        primarySwatch: Colors.red,
        scaffoldBackgroundColor: Colors.white,
        appBarTheme: const AppBarTheme(
          color: Colors.white,
          elevation: 0,
          titleTextStyle: TextStyle(
            color: Colors.black,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
          iconTheme: IconThemeData(color: Colors.black),
        ),
        floatingActionButtonTheme: const FloatingActionButtonThemeData(
          backgroundColor: Colors.red,
          foregroundColor: Colors.white,
        ),
      ),
      home: HomeRouter(initialRole: initialRole),
    );
  }
}

class HomeRouter extends StatefulWidget {
  final String? initialRole;
  const HomeRouter({super.key, this.initialRole});

  @override
  State<HomeRouter> createState() => _HomeRouterState();
}

class _HomeRouterState extends State<HomeRouter> {
  final LocationExchangeService _locationService = LocationExchangeService.instance;
  StreamSubscription? _peerSub;

  @override
  void initState() {
    super.initState();
    _initLocationSharing();
  }

  Future<void> _initLocationSharing() async {
    // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–ø—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
    final prefs = await SharedPreferences.getInstance();
    String? id = prefs.getString('device_id');
    id ??= DateTime.now().millisecondsSinceEpoch.toString(); // –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
    await prefs.setString('device_id', id);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–º–µ–Ω (–º–µ—Ç–æ–¥ start(myId: ...) –≤ —Ç–≤–æ—ë–º —Å–µ—Ä–≤–∏—Å–µ)
    await _locationService.start(myId: id, peerId: null, sendInterval: const Duration(seconds: 10));
    // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –ø—Ä–æ—à–µ–ª.
    debugPrint("‚ö†Ô∏è start() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞");

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –ø–æ—Ç–æ–∫ peerLocationStream (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PeerLocation?)
    _peerSub = _locationService.peerLocationStream.listen((peerLoc) {
      debugPrint("üìç –û–±–Ω–æ–≤–ª—ë–Ω peer: $peerLoc");
      // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ—Å—è–≥–æ: –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏ —Ç.–¥.
    }, onError: (e) {
      debugPrint("–û—à–∏–±–∫–∞ –≤ peerLocationStream: $e");
    });

    debugPrint("‚úÖ –û–±–º–µ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ $id");
  }

  @override
  void dispose() {
    _peerSub?.cancel();
    _locationService.stop();
    super.dispose();
  }

  Widget _selectScreen() {
    if (widget.initialRole == 'driver') return const MapScreen();
    if (widget.initialRole == 'worker') return const WorkerHomeScreen();
    return const AuthScreen();
  }

  @override
  Widget build(BuildContext context) {
    return _selectScreen();
  }
}